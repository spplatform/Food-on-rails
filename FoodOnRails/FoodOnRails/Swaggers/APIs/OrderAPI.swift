//
// OrderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



public class OrderAPI {
    /**
     cancel order
     
     - parameter id: (path) The order ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orderIdDelete(id: String, completion: @escaping ((_ data: StatusResponse?,_ error: Error?) -> Void)) {
        orderIdDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     cancel order
     - DELETE /order/{id}
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter id: (path) The order ID. 

     - returns: RequestBuilder<StatusResponse> 
     */
    public class func orderIdDeleteWithRequestBuilder(id: String) -> RequestBuilder<StatusResponse> {
        var path = "/order/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StatusResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get order
     
     - parameter id: (path) The order ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orderIdGet(id: String, completion: @escaping ((_ data: OrderResponse?,_ error: Error?) -> Void)) {
        orderIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     get order
     - GET /order/{id}
     - examples: [{contentType=application/json, example={
  "coupon" : "coupon",
  "positions" : [ {
    "amount" : 0,
    "total_price" : 6,
    "id" : "id"
  }, {
    "amount" : 0,
    "total_price" : 6,
    "id" : "id"
  } ],
  "id" : "id",
  "status" : "status"
}}]
     
     - parameter id: (path) The order ID. 

     - returns: RequestBuilder<OrderResponse> 
     */
    public class func orderIdGetWithRequestBuilder(id: String) -> RequestBuilder<OrderResponse> {
        var path = "/order/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     create order
     
     - parameter body: (body) Order data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orderPost(body: OrderRequest, completion: @escaping ((_ data: OrderCreateResponse?,_ error: Error?) -> Void)) {
        orderPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     create order
     - POST /order
     - examples: [{contentType=application/json, example={
  "coupon" : "coupon",
  "payment_id" : "payment_id",
  "positions" : [ {
    "amount" : 0,
    "total_price" : 6,
    "id" : "id"
  }, {
    "amount" : 0,
    "total_price" : 6,
    "id" : "id"
  } ],
  "id" : "id",
  "status" : "status"
}}]
     
     - parameter body: (body) Order data 

     - returns: RequestBuilder<OrderCreateResponse> 
     */
    public class func orderPostWithRequestBuilder(body: OrderRequest) -> RequestBuilder<OrderCreateResponse> {
        let path = "/order"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
